Author: Darius Rueckert


To begin with here is a simple game loop, that you may have used for your first game:

const float dt = 1.0f/60;
while(!shouldQuit()){
	handleInput();
	update(dt);
	render();
}

Note: The timestep dt is constant. I'm not talking about a variable timestep here because a constant timestep is better in most cases.

|U|R|U|R|U|R|U|R|U|....
Drawing: U=Update, R=Render


Problems:
 - Exactly one render per update.
 - It updates as fast as it can (even though dt is const)
 
 
 
Things we want:
- Update at the given rate (for example 60 times per second)
- A higher framerate than the update rate. (+a way to not render the same frame multiple times)
- A variable framerate (fast pcs should render at 1000 fps while slow pcs can render slower than the update rate)
- fps limit (for example: don't go faster than 144 fps
- frame skips (if the pc can't keep up with the update rate it should skip some frames)



Step 1: Updating at the right rate.

nextUpdate = currentTime();
while(){
	handleInput();
	if(currentTime() > nextUpdate){
		update(dt);
		nextUpdate += dt;
	}
	render();
}

Explanation:
First we initialize nextUpdate with the currentTime. That means we want to have the next update now.
In each iteration we check if we should update again. After that we just render the image.
With that we already have a constant update rate and a frame rate that can go much higher.

|U|R|R|R|U|R|R|U|R|R|R|R|U|R|U|....   //Multiple renders per update

When render takes a long time or the system can't keep up with loop it is sometimes advisible to skip some renders to not slow the game down.
Let's assume render takes really long but updates is pretty fast. With the above loop it will look like that:

|U|R|U|R|U|R|U|R|U|... //One render per update

As a result the game will run slower than normal because the rendering takes so long that, the update can't keep it's rate.
To fix that some render calls should be skipt, so that the game doesn't run slower, but just with a lower framerate.

|U|U|R|U|U|R|U|U|U|R|U|R|U|U|...  //multiple updates per render

To get that behavior we can just replace the 'if' in the game loop above with a 'while'

...
while(currentTime() > nextUpdate){
	update(dt);
	nextUpdate += dt;
}
...

This is an endless loop when update takes longer than dt. To make sure we render the from time to time again we limit the iterations of
this loop by 'maxFrameSkips'

|U|U|U|U|U|U|R|U|U|U|U|U|U|U|U|.... //Too many updates!!!

...
maxFrameSkips = 2; //A maximum of 2 frames are skipped
for(int i = 0 ; i <= maxFrameSkips && currentTime() > nextUpdate ;++i){
	update(dt);
	nextUpdate += dt;
}
...

|U|U|U|R|U|U|R|U|U|U|R... //Do not update more than three times before rendering


Step 2: FPS Limit

Limiting the fps works exactly like limiting the ups (update rate).

dtf = 1/120; //Cap at 120 fps
nextFrame = currentTime();
nextUpdate = currentTime();
while(){
	handleInput();
	for(int i = 0 ; i <= maxFrameSkips && currentTime() > nextUpdate ;++i){
		update(dt);
		nextUpdate += dt;
	}
	if(currentTime() > nextFrame){
		render();
		nextFrame += dtf;
	}
}

Note: for uncapped fps the dtf should be 0.

With this loop we now have a constant update rate and a variable frame rate with a cap,
but if your pc is very fast the loop will run 'empty', because neither update nor render will be called.

Step 3: Don't waste ressources.

To save ressources we want to let the cpu sleep the right amount of time in each iteration.
The right amount of time is easy to calculate, because we already now when the nextFrame and the nextUpdate should be.
The difference between the currentTime and the lesser of nextFrame and nextUpdate is exactly the time we need to sleep:

delta = min(nextFrame,nextUpdate) - currentTime();
if(delta > 0)
	sleep(delta);
	
	
With all of this we already have a pretty nice game loop. We can adjust the ups, fps and frameSkips and we don't waste cpu power anymore.
But there is still one problem when rendering more than updating:

|U|R|R|R|U|R|R|U|R|R|R|R|U|R|U|...

The render call should not modify any states. In c++ you could write it as the following:
void render() const;

With the sequence above that would mean we are rendering the same frame multiple times. So yeah, we do have a high framerate,
but we can't see it yet. To fix that we actually want to modify the visible state a little bit between the frames.
This is called interpolation.

Step 4: Interpolation

Let's assume we are rendering at exactly 120fps with and ups of 60.
This gives us 2 render calls per update.
 
|U1|R1|R2|U2|R3|R4...

The first render R1 happens right after the update U1 and R2 happens somewhere between U1 and U2.
Both R1 and R2 produce the same image. 
Which image is correct?
R1 is correct.
R2 is incorrect because it falsely renders an image that is ~0.5*dt in the past.

To render the correct state in R2 we need to look in the future, because we are still at the state of update U1 and we don't know the
state at U2 yet. So the question would be like this:
How does the scene look like at U1 + 0.5*dt ?

One solution is extrapolation:

Let's say we have an object at position x moving with a constant velocity v.
We can now predict the position x2 = x + 0.5*dt*v;

If we now predict the positions of all objects cameras etc. we will get a working high fps system.

|U1|R1|Extrapolate to U1+alpha*dt|R2|U2|R3|Extrapolate to U2+alpha*dt|R4...

Let's get this into our game loop. To be more consistent we add an extrapolation step before every render call. In the above example
the alpha before R1 should just be close to 0.



dtf = 1/120; //Cap at 120 fps
nextFrame = currentTime();
nextUpdate = currentTime();
while(){
	handleInput();
	for(int i = 0 ; i <= maxFrameSkips && currentTime() > nextUpdate ;++i){
		update(dt);
		lastUpdate = nextUpdate; 	//we save the time of the last update. This is the time of the current game state.
		nextUpdate += dt;
	}
	if(currentTime() > nextFrame){
		//how much time passed since the last update
		timeSinceLastUpdate = currentTime() - lastUpdate;
		//we normalize it by dt. the result should be in the range [0,1]
        float alpha = timeSinceLastUpdate / dt;
		//extrapolate the gamestate by alpha*dt
		extrapolate(alpha); 
		
		render();
		nextFrame += dtf;
	}
	delta = min(nextFrame,nextUpdate) - currentTime();
	if(delta > 0)
		sleep(delta);
}



Step 5: Actual Interpolation

Even tho the game loop above is correct it is not perfect. The extrapolation is not as easy as it seems.
It is often hard to predict where objects will be in the future. Sudden changes in positions and velocity produced for example by
collisions or external forces, will display visible artifacts. These artifacts let the objects 'teleport' small distances when the update
corrects the wrong estimated position by the extrapolation.

Since correclty predicting the future is pretty much impossible a more conservative approach is usually used.
Instead of extrapolationg the current frame into the future we want tointerpolate between the current frame and one frame in the past.

|U1|...|U2|Interpolate to U1*(1-0)+U2*0|R3|Interpolate to U1*(1-0.5)+U2*0.5|R4...

With this formula we Render at R3 the game state U1 and
at R4 we render the state right between U1 and U2.

As you can see our rendered image 'lags' exactly one timestep behind the logical state.

This may seem bad at first sight, but it's actually much better than extrapolating. 
With a small timestep the delay is usually not noticeable and there are no 'teleporting' artifacts of objects anymore.

Well if my timestep is 16ms that's alot of input lag!

Yes that is true if you handle your inputs in update(). The trick is to handle some inputs in your interpolation right before rendering.
With other words: For the actions we know the exact results in the future we extrapolate.
For example: In a first person shooter the brain is very sensitive to camera movement with your mouse. So you want to set the camera direction
to the correct value in your interpolation step and not in update. This is usually viable, because the looking direction has no 'physical
constraints' and can be predicted correctly in the future.
The actual character movement should still be done in the update step because it is usually influenced by the physic and an extrapolation could
again result in artifacts. Luckily normal players don't notice when the movement lags 16ms.

This paragraph doesn't really change the game loop anymore, but it the reason why in SAIGA it is called 'interpolate' instead of 'extrapolate'.




Step 5: Parallel update

To reduce the update time and have a more consistent framerate the update should be done parallel to the rendering.
Since this is not always possible, for example when you have a list of objects to render (you can't modify the list in parallel)
the parallel update can't replace the normal update. Instead at the end of every normal update a thread is started executing the parallel update, which is then
joined again at the start of a normal update. So if the prallel update takes longer than the time between normal updates the main thread has to wait.

MainThread: 	 |U|R|R|R|U|R|R|U|R|-U|
Second Thread:	 |-|PU---|-|PU-|-|PU|

The parallel update should not be used for rar expensive events like loading stuff from files. That should be parallised in a different way.
A good use of the parallel update would be expensive physics calculations on the CPU that have to be done in every step. You can calculate the next 
physic state of your program while rendering and then use it immediatly in your normal update.



The full source code can be found in "saiga/window/window.cpp, startMainLoop(...)"





