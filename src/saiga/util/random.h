/**
 * Copyright (c) 2017 Darius RÃ¼ckert
 * Licensed under the MIT License.
 * See LICENSE file for more information.
 */

#pragma once

#include "saiga/config.h"
#include "saiga/util/math.h"
#include "saiga/util/assert.h"
#include <vector>

namespace Saiga
{
/**
 * Simple Random numbers that are created by c++11 random engines.
 * These function use static thread local generators.
 * -> They are created on the first use
 * -> Can be used in multi threaded programs
 */
namespace Random
{
/**
 * Sets a random seed.
 * By default the seed is generated by the time.
 * Take care, that the random generator is thread local.
 * Therefore every thread has to call this method.
 */
SAIGA_GLOBAL void setSeed(uint64_t seed);

/**
 * Returns true with a probability of 's'.
 * s must be in the range [0,1].
 */
SAIGA_GLOBAL bool sampleBool(double s);

/**
 * Returns a uniform random value in the given range.
 */
SAIGA_GLOBAL double sampleDouble(double min, double max);

/**
 * Uniform integer in this range.
 * Note:
 * The high-bound is inclusive!!!
 */
SAIGA_GLOBAL int uniformInt(int low, int high);


/**
 * A normal-distributed random value
 */
SAIGA_GLOBAL double gaussRand(double mean = 0, double stddev = 1);



/**
 * Similar to std::rand but with thread save c++11 generators
 */
SAIGA_GLOBAL int rand();

/**
 * Returns 'sampleCount' unique integers between 0 and indexSize-1
 * The returned indices are NOT sorted!
 */
SAIGA_GLOBAL std::vector<int> uniqueIndices(int sampleCount, int indexSize);


}  // namespace Random
}  // namespace Saiga


inline vec3 sphericalRand(float r)
{
    SAIGA_ASSERT(0);
    return vec3(0, 0, 0);
}


inline vec3 sampleCone(vec3 low, float f)
{
    SAIGA_ASSERT(0);
    return vec3(0, 0, 0);
}

inline float linearRand(float low, float high)
{
    return Saiga::Random::sampleDouble(low, high);
}

inline vec2 linearRand(vec2 low, vec2 high)
{
    return vec2(Saiga::Random::sampleDouble(low[0], high[0]), Saiga::Random::sampleDouble(low[1], high[1]));
}


inline vec3 linearRand(vec3 low, vec3 high)
{
    return vec3(Saiga::Random::sampleDouble(low[0], high[0]), Saiga::Random::sampleDouble(low[1], high[1]),
                Saiga::Random::sampleDouble(low[2], high[2]));
}


inline vec2 diskRand(float Radius)
{
    vec2 Result(0, 0);
    float LenRadius = 0;

    do
    {
        Result    = linearRand(make_vec2(-Radius), make_vec2(Radius));
        LenRadius = length(Result);
    } while (LenRadius > Radius);

    return Result;
}
